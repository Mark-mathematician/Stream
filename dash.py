# -*- coding: utf-8 -*-
"""dash

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjkwIotyGjIuCBI9SgphDN5ugu0h_u2K
"""

import streamlit as st
#import plotly.express as px
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

st.title("Data Analysis")
uploaded_file = st.file_uploader("Choose a file", type=["csv", "xlsx", "xls"])

if uploaded_file is not None:
    if uploaded_file.name.endswith(('.csv', '.xlsx', '.xls')):
        try:
            if uploaded_file.name.endswith('.csv'):
                data = pd.read_csv(uploaded_file)
            else:
                data = pd.read_excel(uploaded_file, engine='openpyxl')

            st.write("Here's your loaded data:")
            st.write(data)

            null_values = data.isnull().sum()
            st.write("Null Values:")
            st.write(null_values)

            st.write("Descriptive Statistics:")
            st.write(data.describe())

            correlation_matrix=data.corr()
            st.write("Correlation Matrix")
            st.write(correlation_matrix)

            x_variable = st.selectbox("X-axis variable:", data.columns)
            y_variable = st.selectbox("Y-axis variable:", data.columns)

            if st.button("Click here for Line Graph"):
              st.subheader("Line Plot")
              fig, ax = plt.subplots()
              sns.lineplot(x=x_variable, y=y_variable, data=data, ax=ax)
              st.pyplot(fig)

            if st.button("Click here for Bar Chart"):
              st.subheader("Bar Chart")
              fig2, ax2 = plt.subplots()
              sns.barplot(x=x_variable, y=y_variable, data=data, ax=ax2)
              st.pyplot(fig2)

            if st.button("Click here for Scatter Plot"):
              st.subheader("Scatter Plot")
              fig3, ax = plt.subplots()
              sns.scatterplot(x=x_variable, y=y_variable, data=data, ax=ax)
              st.pyplot(fig3)


            if st.button("Click here for Boxplot"):
              st.subheader("Boxplot")
              fig4, ax = plt.subplots()
              sns.boxplot(x=x_variable, y=y_variable, data=data, ax=ax)
              st.pyplot(fig4)

            if st.button("Click here for Pair Plot"):
              st.subheader("Pair Plot")
              pair_plot = sns.pairplot(data)
              st.pyplot(pair_plot)

            rescaling_method = st.selectbox("Select Rescaling Method:", ["Min-Max Scaling", "Standardization"])
            if rescaling_method == "Min-Max Scaling":
                target_range = st.slider("Select Target Range:", 0.0, 1.0, (0.0, 1.0))

            if st.button("Click here to Rescale Data"):
              if rescaling_method == "Min-Max Scaling":
                scaler = MinMaxScaler(feature_range=target_range)
                data[selected_columns] = scaler.fit_transform(data[selected_columns])

            st.success("Data Rescaled Successfully!")

            st.subheader("Rescaled Data:")
            st.write(data)

        except Exception as e:
            st.error(f"An error occurred while loading the data: {e}")

else:
  st.warning("Please upload a valid CSV or Excel file.")
